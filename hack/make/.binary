#!/usr/bin/env bash
set -eu

: "${OUTPUT=./bundles}"
: "${PACKAGE=./cmd/dockerd}"

: "${CGO_ENABLED=}"

: "${DOCKER_DEBUG=}"
: "${DOCKER_STRIP=}"
: "${DOCKER_LINKMODE=static}"
: "${DOCKER_LDFLAGS=}"
: "${DOCKER_BUILDMODE=}"
: "${DOCKER_BUILDFLAGS=}"

: "${VERSION=}"
: "${GITCOMMIT=}"
: "${BUILDTIME=}"
: "${PLATFORM=}"
: "${PRODUCT=}"
: "${DEFAULT_PRODUCT_LICENSE=}"
: "${PACKAGER_NAME=}"

if [ -z "$VERSION" ]; then
	VERSION=$(git describe --match 'v[0-9]*' --dirty='.m' --always --tags | sed 's/^v//' 2> /dev/null || echo "unknown-version")
fi
if [ -z "$GITCOMMIT" ]; then
	GITCOMMIT=$(git rev-parse --short HEAD 2> /dev/null || true)
fi
if [ -z "$BUILDTIME" ]; then
	BUILDTIME=$(date -u --date="@${SOURCE_DATE_EPOCH:-$(date +%s)}" +"%Y-%m-%dT%H:%M:%SZ")
fi

BIN_NAME=$(basename "$PACKAGE")
BIN_EXT=
if [ "$(go env GOOS)" = "windows" ]; then
	BIN_EXT=.exe
fi

# -buildmode=pie is not supported on Windows and Linux on mips, riscv64 and ppc64be.
# https://github.com/golang/go/blob/77aa209b386a184e7f4b44938f2a05a1b5c5a3cf/src/cmd/internal/sys/supported.go#L89-L99
if [ "$CGO_ENABLED" = "1" ]; then
	case "$(go env GOOS)/$(go env GOARCH)" in
		windows/* | linux/mips* | linux/riscv* | linux/ppc64)
			# TODO remove windows in Go 1.15+: https://github.com/golang/go/commit/95f382139043059a2a0780ba577b53893408f7e4
			# TODO remove riscv64 in Go 1.16+: https://github.com/golang/go/commit/8eb846fd37eb7bded8a1cf6932be2c59069863e5
			;;
		*)
			DOCKER_BUILDMODE="-buildmode=pie"
			;;
	esac
fi

DOCKER_LDFLAGS+="\
	-X \"github.com/docker/docker/dockerversion.Version=${VERSION}\" \
	-X \"github.com/docker/docker/dockerversion.GitCommit=${GITCOMMIT}\" \
	-X \"github.com/docker/docker/dockerversion.BuildTime=${BUILDTIME}\" \
	-X \"github.com/docker/docker/dockerversion.PlatformName=${PLATFORM}\" \
	-X \"github.com/docker/docker/dockerversion.ProductName=${PRODUCT}\" \
	-X \"github.com/docker/docker/dockerversion.DefaultProductLicense=${DEFAULT_PRODUCT_LICENSE}\" \
"

if [ -z "$DOCKER_DEBUG" ]; then
	DOCKER_LDFLAGS+=" -w"
fi

if [ -n "$DOCKER_STRIP" ]; then
	DOCKER_LDFLAGS+=" -s"
fi

# compile the Windows resources into the sources
if [ "$(go env GOOS)" = "windows" ]; then
	(
		. hack/make/.mkwinres
		go generate -v "${PACKAGE}"
	)
fi

echo "Building $DOCKER_LINKMODE $BIN_NAME ($TARGETPLATFORM)..."
(
	go build -o "${OUTPUT}/${BIN_NAME}${BIN_EXT}" -trimpath ${DOCKER_BUILDMODE} "${DOCKER_BUILDFLAGS[@]}" -ldflags "${DOCKER_LDFLAGS}" "${PACKAGE}"
	echo "Created binary: ${OUTPUT}/${BIN_NAME}${BIN_EXT}"
)
